
using Microsoft.EntityFrameworkCore;
using ParkingRentalSpace.Domain.Entities;
using System;
using System.Linq;
using System.Threading.Tasks;
using BCrypt.Net; 

namespace ParkingRentalSpace.Infrastructure.Data;

public static class DataSeeder
{
    public static async Task SeedInitialData(AppDbContext context)
    {
        // Ensure the database is created and migrations are applied
        // context.Database.Migrate(); // This can be controversial, often better handled by Program.cs or external tools

        // --- Seed Users (Always good to have at least one admin and one regular user) ---
        if (!await context.Users.AnyAsync())
        {
            Console.WriteLine("Seeding Users...");

            var adminUser = new User
            {
                // Id will be auto-generated by the DB if not specified for insert
                Name = "Faris Admin",
                Email = "faris@gmail.com",
                PasswordHash = BCrypt.Net.BCrypt.HashPassword("yourAdminPassword!"), // CHANGE THIS PASSWORD!
                Balance = 500.00m,
                CreatedAt = DateTime.UtcNow,
                Role = "Admin"
            };
            await context.Users.AddAsync(adminUser);

            var regularUser1 = new User
            {
                Name = "Test User One",
                Email = "user1@example.com",
                PasswordHash = BCrypt.Net.BCrypt.HashPassword("user1234!"), // CHANGE THIS PASSWORD!
                Balance = 150.00m,
                CreatedAt = DateTime.UtcNow,
                Role = "User"
            };
            await context.Users.AddAsync(regularUser1);

            var regularUser2 = new User
            {
                Name = "Test User Two",
                Email = "user2@example.com",
                PasswordHash = BCrypt.Net.BCrypt.HashPassword("user1234!"), // CHANGE THIS PASSWORD!
                Balance = 75.00m,
                CreatedAt = DateTime.UtcNow,
                Role = "User"
            };
            await context.Users.AddAsync(regularUser2);

            await context.SaveChangesAsync(); // Save users first to get their generated IDs
            Console.WriteLine("Users seeded.");
        }

        // --- Seed Parking Spaces (Link to existing users) ---
        if (!await context.ParkingSpaces.AnyAsync())
        {
            Console.WriteLine("Seeding Parking Spaces...");
            var adminUser = await context.Users.FirstOrDefaultAsync(u => u.Email == "faris@gmail.com");
            var user1 = await context.Users.FirstOrDefaultAsync(u => u.Email == "user1@example.com");

            if (adminUser != null)
            {
                await context.ParkingSpaces.AddAsync(new ParkingSpace
                {
                    OwnerId = adminUser.Id,
                    Address = "123 Admin's Lane, Sarajevo",
                    SpaceName = "Admin's Prime Spot",
                    Description = "Exclusive spot for the admin.",
                    PricePerHour = 7.00m,
                    AvailableTimes = "Mon-Sun 24/7",
                    Latitude = 43.8563,
                    Longitude = 18.4131,
                    IsAvailable = true
                });
            }

            if (user1 != null)
            {
                await context.ParkingSpaces.AddAsync(new ParkingSpace
                {
                    OwnerId = user1.Id,
                    Address = "456 User St, Sarajevo",
                    SpaceName = "User's Street Spot",
                    Description = "Convenient street parking.",
                    PricePerHour = 4.00m,
                    AvailableTimes = "Mon-Fri 8AM-5PM",
                    Latitude = 43.8580,
                    Longitude = 18.4150,
                    IsAvailable = true
                });
            }
            await context.SaveChangesAsync();
            Console.WriteLine("Parking Spaces seeded.");
        }

        // --- Seed Bookings (Link to existing users and parking spaces) ---
        if (!await context.Bookings.AnyAsync())
        {
            Console.WriteLine("Seeding Bookings...");
            var user1 = await context.Users.FirstOrDefaultAsync(u => u.Email == "user1@example.com");
            var adminUser = await context.Users.FirstOrDefaultAsync(u => u.Email == "faris@gmail.com");
            var parkingSpaceFromAdmin = await context.ParkingSpaces.FirstOrDefaultAsync(ps => ps.OwnerId == adminUser.Id);
            var parkingSpaceFromUser1 = await context.ParkingSpaces.FirstOrDefaultAsync(ps => ps.OwnerId == user1.Id);

            if (user1 != null && parkingSpaceFromAdmin != null)
            {
                await context.Bookings.AddAsync(new Booking
                {
                    UserId = user1.Id,
                    UserEmail = user1.Email, // Ensure UserEmail is set if it's a property on Booking
                    ParkingSpaceId = parkingSpaceFromAdmin.Id,
                    StartTime = DateTime.UtcNow.AddDays(-3).AddHours(9),
                    Hours = 2,
                    TotalPrice = 14.00m, // 2 hours * 7.00/hr
                    Status = "Completed"
                });
            }

            if (adminUser != null && parkingSpaceFromUser1 != null)
            {
                await context.Bookings.AddAsync(new Booking
                {
                    UserId = adminUser.Id,
                    UserEmail = adminUser.Email,
                    ParkingSpaceId = parkingSpaceFromUser1.Id,
                    StartTime = DateTime.UtcNow.AddDays(-1).AddHours(14),
                    Hours = 3,
                    TotalPrice = 12.00m, // 3 hours * 4.00/hr
                    Status = "Completed"
                });
            }
            await context.SaveChangesAsync();
            Console.WriteLine("Bookings seeded.");
        }

        // --- Seed Payments (Link to existing users and bookings) ---
        if (!await context.Payments.AnyAsync())
        {
            Console.WriteLine("Seeding Payments...");
            var booking1 = await context.Bookings.FirstOrDefaultAsync(b => b.Status == "Completed" && b.User!.Email == "user1@example.com");
            var booking2 = await context.Bookings.FirstOrDefaultAsync(b => b.Status == "Completed" && b.User!.Email == "faris@gmail.com");

            if (booking1 != null && booking1.User != null)
            {
                await context.Payments.AddAsync(new Payment
                {
                    BookingId = booking1.Id,
                    UserId = booking1.UserId,
                    Amount = booking1.TotalPrice,
                    PaidAt = DateTime.UtcNow.AddDays(-3).AddHours(10), // Paid shortly after booking started
                    Status = "Completed"
                });
            }

            if (booking2 != null && booking2.User != null)
            {
                await context.Payments.AddAsync(new Payment
                {
                    BookingId = booking2.Id,
                    UserId = booking2.UserId,
                    Amount = booking2.TotalPrice,
                    PaidAt = DateTime.UtcNow.AddDays(-1).AddHours(15),
                    Status = "Completed"
                });
            }
            await context.SaveChangesAsync();
            Console.WriteLine("Payments seeded.");
        }
    }
}